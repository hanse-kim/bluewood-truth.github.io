{"version":3,"file":"273e5e7948e694ce3e726c2781f94661655a348d-f7bdc261581991117a97.js","mappings":"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","sources":["webpack://hans-blog/./src/components/tag-button/styled.ts","webpack://hans-blog/./src/components/tag-button/index.tsx","webpack://hans-blog/./src/components/text-button/styled.ts","webpack://hans-blog/./src/components/text-button/index.tsx","webpack://hans-blog/./src/components/typography/index.ts","webpack://hans-blog/./src/styles/keyframes.ts","webpack://hans-blog/./src/views/post-layout/styled.ts","webpack://hans-blog/./src/views/post-layout/post-header.tsx","webpack://hans-blog/./src/views/post-layout/index.tsx","webpack://hans-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const TagButtonWrapper = styled.span`\n  padding: 3px 8px 4px 8px;\n\n  border: none;\n  border-radius: 4px;\n  background-color: var(--color-border);\n\n  color: var(--color-main);\n  font-size: var(--font-size-xs);\n  font-weight: var(--font-weight-regular);\n\n  cursor: pointer;\n  transition:\n    color 0.2s,\n    background-color 0.2s;\n\n  &:hover {\n    color: var(--color-bg);\n    background-color: var(--color-main);\n  }\n`;\n\nexport const TagButtonGroupWrapper = styled.span`\n  display: flex;\n  column-gap: 8px;\n`;\n","import React from 'react';\nimport { routes } from 'src/_common/constants/routes';\nimport { TagButtonGroupWrapper, TagButtonWrapper } from './styled';\nimport { CustomLink } from '../custom-link';\n\nexport const TagButton = ({ tag }: { tag: string }) => {\n  return (\n    <CustomLink to={routes.tag(tag)}>\n      <TagButtonWrapper>{tag}</TagButtonWrapper>\n    </CustomLink>\n  );\n};\n\nexport const TagButtonGroup = ({ tags }: { tags: string[] }) => {\n  if (!tags) {\n    return null;\n  }\n\n  return (\n    <TagButtonGroupWrapper>\n      {tags.map((tag, index) => (\n        <TagButton key={index} tag={tag} />\n      ))}\n    </TagButtonGroupWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const TextButtonWrapper = styled.button`\n  width: fit-content;\n  padding-top: 2px;\n\n  background: none;\n  border: none;\n\n  transition: text-shadow 0.2s;\n  cursor: pointer;\n\n  &:disabled {\n    cursor: default;\n  }\n\n  &:hover:not(:disabled) {\n    text-shadow: 0 0 0.5px var(--color-text);\n  }\n`;\n\nexport const Underline = styled.div`\n  margin: 1px auto 0 auto;\n  width: 0;\n  height: 1px;\n  background-color: var(--color-text);\n  transition: width 0.2s;\n\n  ${TextButtonWrapper}:hover:not(:disabled) > & {\n    width: 100%;\n  }\n`;\n","import React from 'react';\nimport { CustomLink } from '../custom-link';\nimport { TextButtonWrapper, Underline } from './styled';\ninterface Props {\n  to?: string;\n  disabled?: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  children?: React.ReactNode;\n}\n\nexport const TextButton = ({ to, onClick, children, disabled }: Props) => {\n  return (\n    <CustomLink to={to}>\n      <TextButtonWrapper onClick={onClick} disabled={disabled}>\n        {children}\n        <Underline />\n      </TextButtonWrapper>\n    </CustomLink>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HeadingTitle = styled.h1`\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size-title);\n`;\n\nexport const HeadingSubTitle = styled.h2`\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size-sub-title);\n`;\n\nexport const PostDate = styled.p`\n  font-weight: var(--font-weight-thin);\n  font-size: var(--font-size-md);\n`;\n","import { keyframes } from '@emotion/react';\n\nexport const fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { fadeIn } from 'src/styles/keyframes';\n\nconst PostLayout = styled.article`\n  display: flex;\n  flex-direction: column;\n  row-gap: 36px;\n\n  animation: ${fadeIn} 0.5s ease;\n`;\n\nconst PostHeader = styled.header`\n  display: flex;\n  flex-direction: column;\n  row-gap: 16px;\n`;\n\nconst PostContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: var(--font-size-md);\n`;\n\nexport const Styled = {\n  PostLayout,\n  PostHeader,\n  PostContent,\n};\n","import React from 'react';\nimport { TagButtonGroup } from 'src/components/tag-button';\nimport { HeadingTitle, PostDate } from 'src/components/typography';\nimport { Styled } from './styled';\nimport { TextButton } from 'src/components/text-button';\n\ninterface Props {\n  backUrl: string;\n  title: string;\n  date: string;\n  tags: string[];\n}\n\nexport const PostHeader = ({ backUrl, title, date, tags }: Props) => {\n  return (\n    <Styled.PostHeader>\n      <TextButton to={backUrl}>{'< 이전 페이지로'}</TextButton>\n      <hgroup>\n        <HeadingTitle>{title}</HeadingTitle>\n        <PostDate>{`작성일: ${date}`}</PostDate>\n      </hgroup>\n      <TagButtonGroup tags={tags} />\n    </Styled.PostHeader>\n  );\n};\n","import { MDXProvider } from '@mdx-js/react';\nimport React from 'react';\nimport {\n  Anchor,\n  Blockquote,\n  Code,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n  Image,\n  ListItem,\n  OrderedList,\n  Paragraph,\n  Strong,\n  Table,\n  UnorderedList,\n} from 'src/components/markdown';\nimport { type MdxNode } from 'src/types';\nimport { PostHeader } from './post-header';\nimport { Styled } from './styled';\n\ninterface Props {\n  backUrl: string;\n  post: MdxNode;\n  children: React.ReactNode;\n}\n\nconst components = {\n  p: Paragraph,\n  h1: Heading1,\n  h2: Heading2,\n  h3: Heading3,\n  h4: Heading4,\n  ul: UnorderedList,\n  ol: OrderedList,\n  li: ListItem,\n  strong: Strong,\n  a: Anchor,\n  code: Code,\n  blockquote: Blockquote,\n  img: Image,\n  table: Table,\n};\n\nexport const PostLayout = ({ post, backUrl, children }: Props) => {\n  return (\n    <Styled.PostLayout>\n      <PostHeader backUrl={backUrl} {...post.frontmatter} />\n      <Styled.PostContent>\n        <MDXProvider components={components}>{children}</MDXProvider>\n      </Styled.PostContent>\n    </Styled.PostLayout>\n  );\n};\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} props\n *   Props.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(props) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (props.disableParentContext) {\n    allComponents =\n      typeof props.components === 'function'\n        ? props.components(emptyComponents)\n        : props.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(props.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    props.children\n  )\n}\n"],"names":["TagButtonWrapper","_styled","target","name","styles","TagButtonGroupWrapper","TagButton","_ref","tag","___EmotionJSX","CustomLink","to","routes","TagButtonGroup","_ref2","tags","map","index","key","TextButtonWrapper","Underline","TextButton","onClick","children","disabled","HeadingTitle","HeadingSubTitle","PostDate","fadeIn","keyframes","Styled","PostLayout","PostHeader","PostContent","backUrl","title","date","components","p","Paragraph","h1","Heading1","h2","Heading2","h3","Heading3","h4","Heading4","ul","UnorderedList","ol","OrderedList","li","ListItem","strong","Strong","a","Anchor","code","Code","blockquote","Blockquote","img","Image","table","Table","post","_extends","frontmatter","MDXProvider","emptyComponents","MDXContext","useMDXComponents","contextComponents","props","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}