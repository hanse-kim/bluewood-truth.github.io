{"version":3,"file":"component---src-pages-tags-tsx-98a4e1db67aeb3494dc1.js","mappings":"kKAEO,MAAMA,GAAiBC,EAAAA,EAAAA,GAAA,UAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,yMAmBjBC,GAASJ,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,sGAOlBD,EAAiB,wC,cClBd,MAAMM,EAAaC,IAAiD,IAAhD,GAAEC,EAAE,QAAEC,EAAO,SAAEC,EAAQ,SAAEC,GAAiBJ,EACnE,OACEK,EAAAA,EAAAA,GAACC,EAAAA,EAAU,CAACL,GAAIA,IACdI,EAAAA,EAAAA,GAACZ,EAAiB,CAACS,QAASA,EAASE,SAAUA,GAC5CD,GACDE,EAAAA,EAAAA,GAACP,EAAS,OAED,C,qHCfV,MAAMS,GAAYb,EAAAA,EAAAA,GAAA,MAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,QAAAC,OAAA,0EAKZW,GAAed,EAAAA,EAAAA,GAAA,MAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,8EAKfY,GAAQf,EAAAA,EAAAA,GAAA,KAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,qE,8JCDd,MAAMa,EAAUV,IAAsB,IAArB,KAAEW,GAAaX,EACrC,OACEK,EAAAA,EAAAA,GAAA,UACGM,EAAKC,KAAKC,IACTR,EAAAA,EAAAA,GAAA,MAAIS,IAAKD,EAAIE,QACXV,EAAAA,EAAAA,GAACN,EAAAA,EAAU,CAACE,GAAIe,EAAAA,EAAOH,IAAIA,EAAIE,QAC5BF,EAAIE,MAAM,KAAGF,EAAII,WAAW,QAIhC,ECMIC,EAAOA,KAAMb,EAAAA,EAAAA,GAACc,EAAAA,EAAG,CAACC,MAAM,SAarC,MAXiBpB,IAAA,IACfqB,MACEC,WAAW,KAAEX,KAEKX,EAAA,OACpBK,EAAAA,EAAAA,GAACkB,EAAAA,EAAM,MACLlB,EAAAA,EAAAA,GAACE,EAAAA,GAAY,KAAC,YAAUI,EAAKa,OAAO,OACpCnB,EAAAA,EAAAA,GAACK,EAAO,CAACC,KAAMA,IACR,C","sources":["webpack://hans-blog/./src/components/text-button/styled.ts","webpack://hans-blog/./src/components/text-button/index.tsx","webpack://hans-blog/./src/components/typography/index.ts","webpack://hans-blog/./src/views/tag-list/index.tsx","webpack://hans-blog/./src/pages/tags.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const TextButtonWrapper = styled.button`\n  width: fit-content;\n  padding-top: 2px;\n\n  background: none;\n  border: none;\n\n  transition: text-shadow 0.2s;\n  cursor: pointer;\n\n  &:disabled {\n    cursor: default;\n  }\n\n  &:hover:not(:disabled) {\n    text-shadow: 0 0 0.5px var(--color-text);\n  }\n`;\n\nexport const Underline = styled.div`\n  margin: 1px auto 0 auto;\n  width: 0;\n  height: 1px;\n  background-color: var(--color-text);\n  transition: width 0.2s;\n\n  ${TextButtonWrapper}:hover:not(:disabled) > & {\n    width: 100%;\n  }\n`;\n","import React from 'react';\nimport { CustomLink } from '../custom-link';\nimport { TextButtonWrapper, Underline } from './styled';\ninterface Props {\n  to?: string;\n  disabled?: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  children?: React.ReactNode;\n}\n\nexport const TextButton = ({ to, onClick, children, disabled }: Props) => {\n  return (\n    <CustomLink to={to}>\n      <TextButtonWrapper onClick={onClick} disabled={disabled}>\n        {children}\n        <Underline />\n      </TextButtonWrapper>\n    </CustomLink>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HeadingTitle = styled.h1`\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size-title);\n`;\n\nexport const HeadingSubTitle = styled.h2`\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size-sub-title);\n`;\n\nexport const PostDate = styled.p`\n  font-weight: var(--font-weight-thin);\n  font-size: var(--font-size-md);\n`;\n","import React from 'react';\nimport { routes } from 'src/_common/constants/routes';\nimport { TextButton } from 'src/components/text-button';\n\ninterface Props {\n  tags: Array<{\n    value: string;\n    totalCount: number;\n  }>;\n}\n\nexport const TagList = ({ tags }: Props) => {\n  return (\n    <ul>\n      {tags.map((tag) => (\n        <li key={tag.value}>\n          <TextButton to={routes.tag(tag.value)}>\n            {tag.value} ({tag.totalCount})\n          </TextButton>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { graphql, type PageProps } from 'gatsby';\nimport React from 'react';\nimport { SEO } from 'src/components/seo';\nimport { HeadingTitle } from 'src/components/typography';\nimport { Layout } from 'src/views/layout';\nimport { TagList } from 'src/views/tag-list';\n\ninterface DataType {\n  tagsGroup: {\n    tags: Array<{\n      value: string;\n      totalCount: number;\n    }>;\n  };\n}\n\nexport const pageQuery = graphql`\n  query {\n    tagsGroup: allMdx(limit: 2000) {\n      tags: group(field: { frontmatter: { tags: SELECT } }) {\n        value: fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const Head = () => <SEO title=\"Tags\" />;\n\nconst TagsPage = ({\n  data: {\n    tagsGroup: { tags },\n  },\n}: PageProps<DataType>) => (\n  <Layout>\n    <HeadingTitle>모든 태그 (총 {tags.length}개)</HeadingTitle>\n    <TagList tags={tags} />\n  </Layout>\n);\n\nexport default TagsPage;\n"],"names":["TextButtonWrapper","_styled","target","name","styles","Underline","TextButton","_ref","to","onClick","children","disabled","___EmotionJSX","CustomLink","HeadingTitle","HeadingSubTitle","PostDate","TagList","tags","map","tag","key","value","routes","totalCount","Head","SEO","title","data","tagsGroup","Layout","length"],"sourceRoot":""}