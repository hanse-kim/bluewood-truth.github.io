{
    "componentChunkName": "component---src-templates-{tag}-tsx",
    "path": "/tag/til/",
    "result": {"data":{"allMdx":{"totalCount":2,"edges":[{"node":{"id":"97562451-4a31-5e97-820d-e75bb4ab49cf","slug":"2022/03-05-idomatic-expression-with-logical-operation/","frontmatter":{"title":"논리 연산자를 이용한 간단한 조건부 표현식","date":"2022-03-05","tags":["TIL","JavaScript"]},"rawBody":"---\r\ntitle: \"논리 연산자를 이용한 간단한 조건부 표현식\"\r\ndate: \"2022-03-05\"\r\ntags: [\"TIL\", \"JavaScript\"]\r\n---\r\n\r\n## 논리 연산자\r\n\r\n논리 연산자란 조건문에서 흔히 사용하는 `&&`(AND), `||`(OR), `!`(NOT) 등의 연산자를 말한다.\r\n\r\n- `A && B`: A가 참이면 B를, 거짓이면 A를 리턴한다.\r\n- `A || B`: A가 참이면 A를, 거짓이면 B를 리턴한다.\r\n\r\n- `!A`: A가 참이면 `false`를, 거짓이면 `true`를 리턴한다.\r\n\r\n여기서 말하는 참, 거짓은 `Boolean` 타입으로 형변환을 할 때 `true`로 변환될 수 있는가 아닌가를 말한다. JavaScript에선 다음의 경우는 모두 `false`로 변환되고, 그 이외의 값은 `true`로 변환된다.\r\n\r\n- `undefined`, `null`, `NaN`\r\n- `0`, `-0`, `0n`\r\n- 빈 문자열 (`\"\"`, `''`, ` `` ` 등)\r\n\r\n빈 배열(`[]`)이나 빈 객체(`{}`)는 거짓이 아님을 주의하자.\r\n\r\n<br />\r\n\r\n## 조건부 표현식\r\n\r\n함수를 정의할 때 이런 식으로 간단한 예외 처리를 할 수 있다.\r\n\r\n```javascript\r\nfunction (someObject, value) {\r\n    // value가 유효한 값이 아닐 때 someObject.value로 대체한다\r\n    if (!value) {\r\n        value = someObject.value;\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n이때 논리 연산자를 활용하면 보다 간결하게 작성할 수 있다.\r\n\r\n```javascript\r\nfunction (someObject, value) {\r\n    // value가 유효한 값이 아닐 때 someObject.value로 대체한다\r\n    value = value || someObject.value;\r\n    ...\r\n}\r\n```\r\n\r\n비슷하게 리액트의 JSX 표현식에서도 다음과 같이 활용할 수 있다.\r\n\r\n```jsx\r\nconst Profile = ({name, age}) => {\r\n  return (\r\n    <div class=\"profile\">\r\n      <div class=\"name\">{name}</div>\r\n      <!--age가 유효한 값일 때만 UI상에 표시한다-->\r\n      {age && <div class=\"age\">{age}</div>}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n또한 어떤 값을 강제로 `Boolean` 값으로 변환하고 싶을 때는 `!`를 두 번 사용하면 된다. 첫번째 `!`에서 해당 값에 반대되는 `Boolean` 값을 받고, 거기에 한 번 더 `!`를 사용해 원래의 `Boolean` 값을 받는 것이다. 값의 유효성 검사를 할 때 유용하게 사용할 수 있다.\r\n\r\n```javascript\r\nconst isValidProfile = (profile) => {\r\n  // profile, profile.name, profile.age 모두 유효한 값일 때 true, 아니면 false를 리턴한다\r\n  return !!(\r\n    profile &&\r\n    profile.name &&\r\n    typeof profile.name === 'string' &&\r\n    profile.age &&\r\n    typeof profile.age === 'number'\r\n  );\r\n};\r\n```\r\n\r\n위 예에서 만약 `!!`가 없다면 `Boolean`이 아닌 값(`undefined`, `null` 등)을 리턴할 가능성이 있다.\r\n\r\n<br />\r\n\r\n## 참고 자료\r\n\r\n- [Logical OR (||) - JavaScript | MDN (mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR)\r\n- [Logical NOT (!) - JavaScript | MDN (mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT)\r\n\r\n","excerpt":"논리 연산자 논리 연산자란 조건문에서 흔히 사용하는  && (AND),  || (OR),  ! (NOT) 등의 연산자를 말한다. A && B : A가 참이면 B를, 거짓이면 A를 리턴한다. A || B : A가 참이면 A를, 거짓이면 B를 리턴한다. !A : A가 참이면  false 를, 거짓이면  true…"}},{"node":{"id":"4281ceb0-5263-5501-b335-58e3f4a3f3c1","slug":"2022/02-25-css-text-ellipsis/","frontmatter":{"title":"CSS 텍스트 말줄임표(ellipsis) 처리","date":"2022-02-25","tags":["CSS","TIL"]},"rawBody":"---\r\ntitle: \"CSS 텍스트 말줄임표(ellipsis) 처리\"\r\ndate: \"2022-02-25\"\r\ntags: [\"CSS\", \"TIL\"]\r\n---\r\n\r\n## 한 줄의 텍스트\r\n\r\n한 줄의 텍스트는 `text-overflow` 프로퍼티를 사용해 말줄임표 처리를 할 수 있다.\r\n\r\n```CSS\r\n.ellipsis-text {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n\r\n    width: 360px;\r\n    border: 1px solid gray;\r\n}\r\n```\r\n\r\n```html\r\n<div class=\"ellipsis-text\">\r\n    같이, 노래하며 하였으며, 우리 황금시대의 가치를 몸이 있으랴? 그들은 청춘의 물방아 풀이 긴지라 인간이 생생하며, 힘차게 그리하였는가?\r\n</div>\r\n```\r\n\r\n- 결과\r\n\r\n![result1](.\\result1.png)\r\n\r\n`text-overflow`는 단지 텍스트가 오버플로(컨텐츠가 상자 밖으로 넘침) 상태일 때 어떻게 처리할지를 지정해주는 프로퍼티라서 혼자 있을 땐 아무런 의미가 없다. 따라서 `overflow`, `white-space` 프로퍼티를 통해 텍스트 오버플로를 발생시켜야 한다.\r\n\r\n- `overflow`: 상자 밖으로 나간 컨텐츠를 어떻게 처리할지를 결정한다. `hidden`으로 지정하면 밖으로 튀어나온 컨텐츠를 안 보이게 만든다.\r\n- `white-space`: 상자 내의 화이트 스페이스(white space)를 어떻게 처리할지를 결정한다. `nowrap`으로 지정하면 공백을 축소(collapse)하고 줄바꿈하지 않게 만든다.\r\n\r\n따라서 `overflow: hidden`, `white-space: nowrap`과 함께 `text-overflow: ellipsis`를 적용하면 텍스트는 한 줄이 되고 상자 밖으로 나가면 말줄임표 처리가 된다.\r\n\r\n<br />\r\n\r\n## 여러 줄의 텍스트\r\n\r\n`-webkit-line-clamp` 프로퍼티를 이용해 텍스트 줄 수를 강제할 수 있다. 이 프로퍼티는 `display: -webkit-box`, `-webkit-box-orient: vertical`과 함께 사용할 경우에만 동작한다.\r\n\r\n```css\r\n.ellipsis-text-2-line {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2;\r\n    -webkit-box-orient: vertical;\r\n    line-height:1.5em;\r\n    height: 3em;\r\n\r\n    width: 360px;\r\n    border: 1px solid gray;\r\n}\r\n```\r\n\r\n```html\r\n<div class=\"ellipsis-text-2-line\">\r\n    같이, 노래하며 하였으며, 우리 황금시대의 가치를 몸이 있으랴? 그들은 청춘의 물방아 풀이 긴지라 인간이 생생하며, 힘차게 그리하였는가?\r\n</div>\r\n```\r\n\r\n- 결과\r\n\r\n![result2](.\\result2.png)\r\n\r\n`-webkit-line-clamp`와 `-webkit-box-orient`는 비록 많은 브라우저에서 지원한다지만 표준이 아닌 만큼 크로스 브라우징에 주의할 필요가 있다. Stack Overflow의 [이 답변](https://stackoverflow.com/questions/5269713/css-ellipsis-on-second-line#answer-50566101)에서는 `@supports` 규칙을 이용해 호환성을 높이는 방법을 제시하고 있다.\r\n\r\n```css\r\n.text {\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n\r\n    @supports (-webkit-line-clamp: 2) {\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: initial;\r\n        display: -webkit-box;\r\n        -webkit-line-clamp: 2;\r\n        -webkit-box-orient: vertical;\r\n    }\r\n}\r\n```\r\n\r\n`-webkit-line-clamp` 프로퍼티를 지원한다면 두 줄로, 그렇지 않다면 한 줄로 처리될 것이다.\r\n\r\n이외에 JavaScript를 통해 말줄임표 처리를 하는 방법도 있지만, CSS로 처리할 수 있는 일은 CSS를 쓰는 게 가장 좋다고 생각하기 때문에 위 방법이 제일 낫다고 생각한다.\r\n\r\n","excerpt":"한 줄의 텍스트 한 줄의 텍스트는  text-overflow  프로퍼티를 사용해 말줄임표 처리를 할 수 있다. 결과 text-overflow 는 단지 텍스트가 오버플로(컨텐츠가 상자 밖으로 넘침) 상태일 때 어떻게 처리할지를 지정해주는 프로퍼티라서 혼자 있을 땐 아무런 의미가 없다. 따라서  overflow ,  white-space…"}}]}},"pageContext":{"tag":"TIL"}},
    "staticQueryHashes": ["2278949984","3702207254"]}