{"version":3,"file":"bebca76e802ea4e3be21d0f26b8dfd2a38768d60-4981533e5da2a80e7a28.js","mappings":"mLAEO,IAAMA,GAAmB,eAAH,oBAAG,CAAH,gVAiBhBC,GAAwB,eAAH,oBAAG,CAAH,uD,UCfrBC,EAAY,SAAC,GAAyB,IAAxBC,EAAwB,EAAxBA,IACzB,OACE,aAAGC,MAAMC,EAAAA,EAAAA,IAAUF,KACjB,QAACH,EAAD,KAAmBG,KAKZG,EAAiB,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,KAC/B,OAAKA,GAKH,QAACN,EAAD,KACGM,EAAKC,KAAI,SAACL,EAAKM,GAAN,OACR,QAACP,EAAD,CAAWQ,IAAKD,EAAON,IAAKA,QANzB,O,6ECLEQ,EAAgB,SAC3BC,EAD2B,GAGxB,iBAD8D,GAC9D,MADFC,aAAAA,OACE,MADa,GACb,EADiBC,EACjB,EADiBA,YACjB,IAD8BC,YAAAA,OAC9B,SACH,GAA0CC,EAAAA,EAAAA,UAAc,IAAjDC,EAAP,KAAsBC,EAAtB,KACA,GAAgCF,EAAAA,EAAAA,UAASF,GAAe,GAAjDK,EAAP,KAAiBC,EAAjB,KACOC,GAAYC,EAAAA,EAAAA,KAAZD,UAEPE,EAAAA,EAAAA,YAAU,WACJR,GACFK,EAAYN,GAAe,KAE5B,CAACC,EAAaD,KAEjBS,EAAAA,EAAAA,YAAU,WACR,IAAMC,GAAcL,EAAW,GAAKN,EAC9BY,EAAWN,EAAWN,EAC5BK,EAAiBN,EAAKc,MAAMF,EAAYC,MACvC,CAACb,EAAMO,EAAUN,IAEpB,IAAMc,GAAWC,EAAAA,EAAAA,UACf,kBAAMC,KAAKC,KAAKlB,EAAKmB,OAASlB,KAC9B,CAACD,EAAKmB,OAAQlB,IAGVmB,GAAUC,EAAAA,EAAAA,cACd,SAACC,EAAcC,GACTD,EAAOP,IAAUO,EAAOP,GACxBO,EAAO,IAAGA,EAAO,GAEjBnB,IACFM,EAAS,SAASa,GAClBC,GAAYA,EAASD,IAGvBd,EAAYc,KAEd,IAGF,MAAO,CAACjB,cAAAA,EAAeE,SAAAA,EAAUa,QAAAA,EAASL,SAAAA,K,6EC9C/BL,EAAY,WAiBvB,MAAO,CAACc,MAhBKH,EAAAA,EAAAA,cAAY,SAACI,GACxBC,SAASlC,KAAOiC,IACf,IAcWE,UAZGN,EAAAA,EAAAA,cAAY,SAACI,GAC5BC,SAASE,QAAQH,KAChB,IAUqBhB,UARPY,EAAAA,EAAAA,cAAY,SAACI,IAC5BI,EAAAA,EAAAA,IAAeJ,KACd,IAM+BK,MAJrBT,EAAAA,EAAAA,cAAY,WACvBU,QAAQD,SACP,O,2DClB+CE,EAASC,ECEhDC,GAASC,E,QAAAA,IAAH,IDFiCH,ECEjC,sIDDZC,IACHA,EAAMD,EAAQlB,MAAM,IAGtBkB,EAAQC,IAAMA,ECHG,EDIVD,K,iGEJF,IAAMI,GAAiB,cAAH,oBAAG,CAAH,qDAKdC,GAAoB,cAAH,oBAAG,CAAH,wK,UCKjBC,EAAa,SAAC,GAMd,IALXhB,EAKW,EALXA,KACAiB,EAIW,EAJXA,MACAnB,EAGW,EAHXA,QACAoB,EAEW,EAFXA,SACAC,EACW,EADXA,SAEMC,GAAerB,EAAAA,EAAAA,cAAY,WAC/BD,EAAQE,GAAM,kBAAMqB,OAAOC,SAAS,EAAG,QACtC,CAACtB,IAEJ,OACE,QAACe,EAAD,CAAmBQ,QAASH,EAAc,gBAAeD,IACvD,QAAC,IAAD,CAAYD,SAAUC,GAAYD,GAAWD,GAASjB,KCV/CwB,EAAU,SAAC,GAMX,IALXvC,EAKW,EALXA,SACAQ,EAIW,EAJXA,SACAK,EAGW,EAHXA,QAGW,IAFX2B,UAAAA,OAEW,MAFC,GAED,MADXC,eAEOC,EAAYC,EAAW3C,EAAUQ,EAAUgC,OADvC,MADM,QACN,GACJE,SAEP,OACE,QAACb,EAAD,MACE,QAACE,EAAD,CACEC,MAAM,IACNjB,KAAM2B,EAAS,GAAK,EACpB7B,QAASA,EACToB,SAA0B,IAAhBS,EAAS,KAEpBA,EAASrD,KAAI,SAAC0B,GAAD,OACZ,QAACgB,EAAD,CACEhB,KAAMA,EACNF,QAASA,EACTqB,SAAUlC,IAAae,EACvBxB,IAAKwB,QAGT,QAACgB,EAAD,CACEC,MAAM,IACNjB,KAAM2B,EAASA,EAAS9B,OAAS,GAAK,EACtCC,QAASA,EACToB,SAAUS,EAASA,EAAS9B,OAAS,KAAOJ,MAM9CmC,EAAa,SACjB3C,EACAQ,EACAgC,EACAI,GAEA,OAAmC/C,EAAAA,EAAAA,UAAmB,IAA/C6C,EAAP,KAAiBG,EAAjB,KAqBA,OAnBAzC,EAAAA,EAAAA,YAAU,WACR,IAAI0C,EAAwBC,EAC5B,OAAQH,GACN,IAAK,QAEHG,GADAD,EAAiB9C,GAAaA,EAAW,GAAKwC,GACbA,EAAY,EAC7C,MAEF,IAAK,WACHM,EAAiB9C,EAAWU,KAAKsC,MAAMR,EAAY,GACnDO,EAAgB/C,EAAWU,KAAKsC,MAAMR,EAAY,GAItDM,EAAiBpC,KAAKuC,IAAI,EAAGH,GAC7BC,EAAgBrC,KAAKwC,IAAI1C,EAAUuC,GACnCF,GAAeM,EAAAA,EAAAA,IAAML,EAAgBC,EAAgB,MACpD,CAAC/C,EAAUQ,IAEP,CAACkC,SAAAA,K,mHCzEH,IAAMU,GAAkB,aAAH,mBAAG,CAAH,gFAKbzB,EAAAA,EALa,eAQf0B,GAAkB,cAAH,mBAAG,CAAH,2EAMfC,GAAiB,iBAAH,mBAAG,CAAH,yEAMdC,GAAsB,YAAH,mBAAG,CAAH,+M,oBCXnBC,EAAW,SAAC,GAA4B,IAA3BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAC9B,OACE,QAACL,EAAD,MACE,QAAC,KAAD,CAAMM,IAAIC,EAAAA,EAAAA,IAAWH,EAAKI,MAAOC,MAAO,CAACJ,SAAAA,KACvC,QAACJ,EAAD,MACE,QAAC,KAAD,KAAkBG,EAAKM,YAAYC,QACnC,QAAC,KAAD,aAAgBP,EAAKM,YAAYE,SAGrC,QAAC,IAAD,CAAgB7E,KAAMqE,EAAKM,YAAY3E,QACvC,QAACmE,EAAD,KAAsBE,EAAKS,WCbpBC,EAAW,SAAC,GAA6B,IAA5BC,EAA4B,EAA5BA,MAAOV,EAAqB,EAArBA,SAC/B,OACE,QAACN,EAAD,KACGgB,EAAM/E,KAAI,SAACoE,GAAD,OACT,QAACD,EAAD,CAAUjE,IAAKkE,EAAKY,GAAIZ,KAAMA,EAAMC,SAAUA","sources":["webpack://bluewood-blog/./src/components/tagButton/styled.ts","webpack://bluewood-blog/./src/components/tagButton/index.tsx","webpack://bluewood-blog/./src/hooks/usePagination.ts","webpack://bluewood-blog/./src/hooks/useRouter.ts","webpack://bluewood-blog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://bluewood-blog/./src/styles/keyframes.ts","webpack://bluewood-blog/./src/views/pageNav/styled.ts","webpack://bluewood-blog/./src/views/pageNav/pageButton.tsx","webpack://bluewood-blog/./src/views/pageNav/index.tsx","webpack://bluewood-blog/./src/views/postList/styled.ts","webpack://bluewood-blog/./src/views/postList/postItem.tsx","webpack://bluewood-blog/./src/views/postList/index.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const TagButtonWrapper = styled.span`\r\n  padding: 3px 8px 4px 8px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: var(--font-size-xs);\r\n  font-weight: var(--font-weight-regular);\r\n  color: var(--color-main);\r\n  background-color: var(--color-border);\r\n  cursor: pointer;\r\n  transition: color 0.2s, background-color 0.2s;\r\n\r\n  &:hover {\r\n    color: var(--color-bg);\r\n    background-color: var(--color-main);\r\n  }\r\n`;\r\n\r\nexport const TagButtonGroupWrapper = styled.span`\r\n  display: flex;\r\n  column-gap: 8px;\r\n`;","import React from 'react';\r\nimport {getTagUrl} from 'src/utils/common';\r\nimport {TagButtonGroupWrapper, TagButtonWrapper} from './styled';\r\n\r\nexport const TagButton = ({tag}: {tag: string}) => {\r\n  return (\r\n    <a href={getTagUrl(tag)}>\r\n      <TagButtonWrapper>{tag}</TagButtonWrapper>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport const TagButtonGroup = ({ tags }: { tags: string[] }) => {\r\n  if (!tags) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <TagButtonGroupWrapper>\r\n      {tags.map((tag, index) => (\r\n        <TagButton key={index} tag={tag} />\r\n      ))}\r\n    </TagButtonGroupWrapper>\r\n  );\r\n};\r\n","import {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport {useRouter} from './useRouter';\r\n\r\ninterface Options {\r\n  itemsPerPage?: number;\r\n  initialPage?: number;\r\n  withRouting?: boolean;\r\n}\r\n\r\nexport const usePagination = <T>(\r\n  data: T[],\r\n  {itemsPerPage = 10, initialPage, withRouting = false}: Options = {}\r\n) => {\r\n  const [paginatedData, setPaginatedData] = useState<T[]>([]);\r\n  const [currPage, setCurrPage] = useState(initialPage || 1);\r\n  const {navigate} = useRouter();\r\n\r\n  useEffect(() => {\r\n    if (withRouting) {\r\n      setCurrPage(initialPage || 1);\r\n    }\r\n  }, [withRouting, initialPage]);\r\n\r\n  useEffect(() => {\r\n    const startIndex = (currPage - 1) * itemsPerPage;\r\n    const endIndex = currPage * itemsPerPage;\r\n    setPaginatedData(data.slice(startIndex, endIndex));\r\n  }, [data, currPage, itemsPerPage]);\r\n\r\n  const lastPage = useMemo(\r\n    () => Math.ceil(data.length / itemsPerPage),\r\n    [data.length, itemsPerPage]\r\n  );\r\n\r\n  const setPage = useCallback(\r\n    (page: number, callback?: (page?: number) => void) => {\r\n      if (page > lastPage) page = lastPage;\r\n      if (page < 1) page = 1;\r\n\r\n      if (withRouting) {\r\n        navigate(`?page=${page}`);\r\n        callback && callback(page);\r\n      }\r\n\r\n      setCurrPage(page);\r\n    },\r\n    []\r\n  );\r\n\r\n  return {paginatedData, currPage, setPage, lastPage};\r\n};\r\n","import {useCallback} from 'react';\r\nimport {navigate as gatsbyNavigate} from 'gatsby';\r\n\r\nexport const useRouter = () => {\r\n  const move = useCallback((url: string) => {\r\n    location.href = url;\r\n  }, []);\r\n\r\n  const redirect = useCallback((url: string) => {\r\n    location.replace(url);\r\n  }, []);\r\n\r\n  const navigate = useCallback((url: string) => {\r\n    gatsbyNavigate(url);\r\n  }, []);\r\n\r\n  const back = useCallback(() => {\r\n    history.back();\r\n  }, []);\r\n\r\n  return {move, redirect, navigate, back};\r\n};\r\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import {keyframes} from '@emotion/react';\r\n\r\nexport const fadeIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const PageNavWrapper = styled.div`\r\n  display: flex;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const PageButtonWrapper = styled.div`\r\n  width: 36px;\r\n  height: 36px;\r\n  font-size: var(--font-size-lg);\r\n\r\n  &[data-selected='true'] {\r\n    color: var(--color-main);\r\n    font-weight: var(--font-weight-regular);\r\n  }\r\n`;\r\n","import React, {useCallback} from 'react';\r\nimport {TextButton} from 'src/components/textButton';\r\nimport {PageButtonWrapper} from './styled';\r\n\r\ninterface Props {\r\n  page: number;\r\n  label?: string;\r\n  disabled?: boolean;\r\n  selected?: boolean;\r\n  setPage: (page: number, callback: (page?: number) => void) => void;\r\n}\r\n\r\nexport const PageButton = ({\r\n  page,\r\n  label,\r\n  setPage,\r\n  disabled,\r\n  selected,\r\n}: Props) => {\r\n  const clickHandler = useCallback(() => {\r\n    setPage(page, () => window.scrollTo(0, 0));\r\n  }, [page]);\r\n\r\n  return (\r\n    <PageButtonWrapper onClick={clickHandler} data-selected={selected}>\r\n      <TextButton disabled={selected || disabled}>{label || page}</TextButton>\r\n    </PageButtonWrapper>\r\n  );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {range} from 'src/utils/common';\r\nimport {PageButton} from './pageButton';\r\nimport {PageNavWrapper} from './styled';\r\n\r\ninterface Props {\r\n  currPage: number;\r\n  lastPage: number;\r\n  setPage: (page: number) => void;\r\n  navLength?: number;\r\n  navDisPlayType?: NavDisplayType;\r\n}\r\n\r\ntype NavDisplayType = 'fixed' | 'centered';\r\n\r\nexport const PageNav = ({\r\n  currPage,\r\n  lastPage,\r\n  setPage,\r\n  navLength = 10,\r\n  navDisPlayType = 'fixed',\r\n}: Props) => {\r\n  const {pageList} = usePageNav(currPage, lastPage, navLength, navDisPlayType);\r\n\r\n  return (\r\n    <PageNavWrapper>\r\n      <PageButton\r\n        label='<'\r\n        page={pageList[0] - 1}\r\n        setPage={setPage}\r\n        disabled={pageList[0] === 1}\r\n      />\r\n      {pageList.map((page) => (\r\n        <PageButton\r\n          page={page}\r\n          setPage={setPage}\r\n          selected={currPage === page}\r\n          key={page}\r\n        />\r\n      ))}\r\n      <PageButton\r\n        label='>'\r\n        page={pageList[pageList.length - 1] + 1}\r\n        setPage={setPage}\r\n        disabled={pageList[pageList.length - 1] === lastPage}\r\n      />\r\n    </PageNavWrapper>\r\n  );\r\n};\r\n\r\nconst usePageNav = (\r\n  currPage: number,\r\n  lastPage: number,\r\n  navLength: number,\r\n  navDisplayType: NavDisplayType\r\n) => {\r\n  const [pageList, setPageNavList] = useState<number[]>([]);\r\n\r\n  useEffect(() => {\r\n    let firstPageInNav: number, lastPageInNav: number;\r\n    switch (navDisplayType) {\r\n      case 'fixed': {\r\n        firstPageInNav = currPage - ((currPage - 1) % navLength);\r\n        lastPageInNav = firstPageInNav + navLength - 1;\r\n        break;\r\n      }\r\n      case 'centered': {\r\n        firstPageInNav = currPage - Math.floor(navLength / 2);\r\n        lastPageInNav = currPage + Math.floor(navLength / 2);\r\n      }\r\n    }\r\n\r\n    firstPageInNav = Math.max(1, firstPageInNav);\r\n    lastPageInNav = Math.min(lastPage, lastPageInNav);\r\n    setPageNavList(range(firstPageInNav, lastPageInNav + 1));\r\n  }, [currPage, lastPage]);\r\n\r\n  return {pageList};\r\n};\r\n","import {keyframes} from '@emotion/react';\r\nimport styled from '@emotion/styled';\r\nimport {fadeIn} from 'src/styles/keyframes';\r\n\r\nexport const PostListWrapper = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 36px;\r\n  margin-bottom: 72px;\r\n  animation: ${fadeIn} 0.5s ease;\r\n`;\r\n\r\nexport const PostItemWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 12px;\r\n`;\r\n\r\nexport const PostItemHeader = styled.hgroup`\r\n  display: flex;\r\n  flex-direction: column;\r\n  row-gap: 2px;\r\n`;\r\n\r\nexport const PostItemDescription = styled.p`\r\n  color: var(--color-text-footer);\r\n  font-size: var(--font-size-sm);\r\n  width: 100%;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n","import React from 'react';\r\nimport {Link} from 'gatsby';\r\nimport {MdxNode} from 'src/types';\r\nimport {getPostUrl} from 'src/utils/common';\r\nimport {TagButtonGroup} from 'src/components/tagButton';\r\nimport {PostItemHeader, PostItemDescription, PostItemWrapper} from './styled';\r\nimport {HeadingSubTitle, PostDate} from 'src/components/typography';\r\n\r\ninterface Props {\r\n  node: MdxNode;\r\n  referrer?: string;\r\n}\r\n\r\nexport const PostItem = ({node, referrer}: Props) => {\r\n  return (\r\n    <PostItemWrapper>\r\n      <Link to={getPostUrl(node.slug)} state={{referrer}}>\r\n        <PostItemHeader>\r\n          <HeadingSubTitle>{node.frontmatter.title}</HeadingSubTitle>\r\n          <PostDate>작성일: {node.frontmatter.date}</PostDate>\r\n        </PostItemHeader>\r\n      </Link>\r\n      <TagButtonGroup tags={node.frontmatter.tags} />\r\n      <PostItemDescription>{node.excerpt}</PostItemDescription>\r\n    </PostItemWrapper>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {MdxNode} from 'src/types';\r\nimport {PostItem} from './postItem';\r\nimport {PostListWrapper} from './styled';\r\n\r\ninterface Props {\r\n  nodes: MdxNode[];\r\n  referrer?: string;\r\n}\r\n\r\nexport const PostList = ({nodes, referrer}: Props) => {\r\n  return (\r\n    <PostListWrapper>\r\n      {nodes.map((node) => (\r\n        <PostItem key={node.id} node={node} referrer={referrer} />\r\n      ))}\r\n    </PostListWrapper>\r\n  );\r\n};\r\n"],"names":["TagButtonWrapper","TagButtonGroupWrapper","TagButton","tag","href","getTagUrl","TagButtonGroup","tags","map","index","key","usePagination","data","itemsPerPage","initialPage","withRouting","useState","paginatedData","setPaginatedData","currPage","setCurrPage","navigate","useRouter","useEffect","startIndex","endIndex","slice","lastPage","useMemo","Math","ceil","length","setPage","useCallback","page","callback","move","url","location","redirect","replace","gatsbyNavigate","back","history","strings","raw","fadeIn","keyframes","PageNavWrapper","PageButtonWrapper","PageButton","label","disabled","selected","clickHandler","window","scrollTo","onClick","PageNav","navLength","navDisPlayType","pageList","usePageNav","navDisplayType","setPageNavList","firstPageInNav","lastPageInNav","floor","max","min","range","PostListWrapper","PostItemWrapper","PostItemHeader","PostItemDescription","PostItem","node","referrer","to","getPostUrl","slug","state","frontmatter","title","date","excerpt","PostList","nodes","id"],"sourceRoot":""}